#!/usr/bin/env node

/**
 * üöÄ Setup Script per GZ Nutrition Website
 * 
 * Script di configurazione automatica per nuovi clienti
 * Guida passo-passo attraverso la configurazione completa
 */

const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Utility functions
const question = (query) => new Promise((resolve) => rl.question(query, resolve));
const log = (message) => console.log(`üîß ${message}`);
const success = (message) => console.log(`‚úÖ ${message}`);
const warning = (message) => console.log(`‚ö†Ô∏è  ${message}`);
const error = (message) => console.log(`‚ùå ${message}`);

// Configuration object
let config = {
  client: {},
  firebase: {},
  email: {},
  calendar: {},
  recaptcha: {}
};

// Main setup function
async function runSetup() {
  console.log(`
ü•ó ===================================
   GZ NUTRITION WEBSITE SETUP
===================================

Questo script ti guider√† nella configurazione completa
del sito per un nuovo cliente.

Assicurati di avere:
- Account Firebase creato
- Account Gmail configurato  
- Google Calendar API abilitato
- reCAPTCHA keys generate

Iniziamo! üöÄ
`);

  try {
    await collectClientInfo();
    await collectFirebaseConfig();
    await collectEmailConfig();
    await collectCalendarConfig();
    await collectRecaptchaConfig();
    await generateConfigFiles();
    await showFinalInstructions();
  } catch (err) {
    error(`Errore durante setup: ${err.message}`);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Collect client information
async function collectClientInfo() {
  log('üìã Informazioni Cliente');
  
  config.client.name = await question('Nome cliente/studio: ');
  config.client.email = await question('Email nutrizionista: ');
  config.client.domain = await question('Dominio finale (es: studio-nutrizione.com): ');
  config.client.businessName = await question('Nome business per email: ');
  
  success('Informazioni cliente raccolte');
}

// Collect Firebase configuration
async function collectFirebaseConfig() {
  log('üî• Configurazione Firebase');
  
  config.firebase.projectId = await question('Firebase Project ID: ');
  config.firebase.apiKey = await question('Firebase API Key: ');
  config.firebase.authDomain = await question('Firebase Auth Domain: ');
  config.firebase.storageBucket = await question('Firebase Storage Bucket: ');
  config.firebase.messagingSenderId = await question('Firebase Messaging Sender ID: ');
  config.firebase.appId = await question('Firebase App ID: ');
  
  success('Configurazione Firebase raccolta');
}

// Collect email configuration
async function collectEmailConfig() {
  log('üìß Configurazione Email');
  
  config.email.smtpUser = await question('Gmail address (SMTP): ');
  config.email.appPassword = await question('Gmail App Password (16 chars): ');
  config.email.fromEmail = await question('Email mittente (es: noreply@domain.com): ');
  config.email.notificationEmail = await question('Email notifiche (destinatario): ');
  
  success('Configurazione email raccolta');
}

// Collect Google Calendar configuration
async function collectCalendarConfig() {
  log('üìÖ Configurazione Google Calendar');
  
  config.calendar.calendarId = await question('Google Calendar ID: ');
  config.calendar.serviceAccountEmail = await question('Service Account Email: ');
  config.calendar.serviceAccountKeyPath = await question('Path chiave Service Account JSON: ');
  
  success('Configurazione Calendar raccolta');
}

// Collect reCAPTCHA configuration
async function collectRecaptchaConfig() {
  log('üîí Configurazione reCAPTCHA');
  
  config.recaptcha.siteKey = await question('reCAPTCHA Site Key: ');
  config.recaptcha.secretKey = await question('reCAPTCHA Secret Key: ');
  
  success('Configurazione reCAPTCHA raccolta');
}

// Generate configuration files
async function generateConfigFiles() {
  log('üìÑ Generazione file di configurazione...');
  
  // Generate Firebase config
  const firebaseConfig = `// Firebase Configuration
// Generated by setup script
export const firebaseConfig = {
  apiKey: "${config.firebase.apiKey}",
  authDomain: "${config.firebase.authDomain}",
  projectId: "${config.firebase.projectId}",
  storageBucket: "${config.firebase.storageBucket}",
  messagingSenderId: "${config.firebase.messagingSenderId}",
  appId: "${config.firebase.appId}"
};`;

  // Generate environment variables
  const envVars = `# Environment Variables for ${config.client.name}
# Generated by setup script

# Firebase Configuration
NEXT_PUBLIC_FIREBASE_API_KEY=${config.firebase.apiKey}
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${config.firebase.authDomain}
NEXT_PUBLIC_FIREBASE_PROJECT_ID=${config.firebase.projectId}
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${config.firebase.storageBucket}
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${config.firebase.messagingSenderId}
NEXT_PUBLIC_FIREBASE_APP_ID=${config.firebase.appId}

# reCAPTCHA Configuration
NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${config.recaptcha.siteKey}

# Build Configuration
NODE_ENV=production`;

  // Generate Firebase CLI commands
  const firebaseCommands = `#!/bin/bash
# Firebase Setup Commands for ${config.client.name}
# Generated by setup script

echo "üî• Setting up Firebase for ${config.client.name}..."

# Set Firebase project
firebase use ${config.firebase.projectId}

# Configure email secrets
echo "Setting up email configuration..."
firebase functions:secrets:set SMTP_PASSWORD --value="${config.email.appPassword}"

# Configure reCAPTCHA secrets  
echo "Setting up reCAPTCHA configuration..."
firebase functions:secrets:set RECAPTCHA_SECRET_KEY --value="${config.recaptcha.secretKey}"

# Configure Calendar secrets
echo "Setting up Calendar configuration..."
firebase functions:secrets:set GOOGLE_SERVICE_ACCOUNT --data-file="${config.calendar.serviceAccountKeyPath}"

# Configure environment variables
echo "Setting up environment variables..."
firebase functions:config:set smtp.user="${config.email.smtpUser}"
firebase functions:config:set smtp.from="${config.email.fromEmail}"
firebase functions:config:set notification.email="${config.email.notificationEmail}"
firebase functions:config:set calendar.service_account_email="${config.calendar.serviceAccountEmail}"
firebase functions:config:set calendar.calendar_id="${config.calendar.calendarId}"

# Deploy everything
echo "üöÄ Deploying to Firebase..."
firebase deploy

echo "‚úÖ Setup completato per ${config.client.name}!"
echo "üìã Verifica configurazione su: https://${config.firebase.projectId}.web.app/admin"`;

  // Generate client configuration
  const clientConfig = `/**
 * Client Configuration for ${config.client.name}
 * Generated by setup script on ${new Date().toISOString()}
 */

export const CLIENT_CONFIG = {
  businessName: "${config.client.businessName}",
  contactEmail: "${config.client.email}",
  domain: "${config.client.domain}",
  
  // Default site content
  defaultContent: {
    businessName: "${config.client.businessName}",
    notificationEmail: "${config.email.notificationEmail}",
    recaptchaEnabled: true,
    recaptchaSiteKey: "${config.recaptcha.siteKey}",
    
    // Google Calendar
    googleCalendar: {
      isEnabled: true,
      calendarId: "${config.calendar.calendarId}",
      timezone: "Europe/Rome",
      serviceAccountEmail: "${config.calendar.serviceAccountEmail}"
    }
  }
};`;

  // Write files
  const outputDir = path.join(__dirname, 'setup-output');
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir);
  }

  fs.writeFileSync(path.join(outputDir, 'firebase-config.js'), firebaseConfig);
  fs.writeFileSync(path.join(outputDir, '.env.production'), envVars);
  fs.writeFileSync(path.join(outputDir, 'firebase-setup.sh'), firebaseCommands);
  fs.writeFileSync(path.join(outputDir, 'client-config.js'), clientConfig);
  
  // Make bash script executable
  try {
    fs.chmodSync(path.join(outputDir, 'firebase-setup.sh'), '755');
  } catch (e) {
    warning('Non riesco a rendere eseguibile firebase-setup.sh');
  }
  
  success('File di configurazione generati in ./setup-output/');
}

// Show final instructions
async function showFinalInstructions() {
  console.log(`
üéâ ===================================
   SETUP COMPLETATO CON SUCCESSO!
===================================

File generati in ./setup-output/:
‚îú‚îÄ‚îÄ firebase-config.js      # Configurazione Firebase
‚îú‚îÄ‚îÄ .env.production         # Variabili ambiente
‚îú‚îÄ‚îÄ firebase-setup.sh       # Script setup Firebase
‚îî‚îÄ‚îÄ client-config.js        # Configurazione cliente

üìã PROSSIMI PASSI:

1. üî• FIREBASE SETUP:
   cd setup-output
   chmod +x firebase-setup.sh
   ./firebase-setup.sh

2. üåê RENDER SETUP (Pre-produzione):
   - Copia .env.production in Render dashboard
   - Deploy automatico da GitHub

3. üé® PERSONALIZZAZIONE:
   - Vai su /admin/content
   - Configura colori e contenuti
   - Testa tutte le funzionalit√†

4. ‚úÖ VERIFICA FINALE:
   - Email notifications: /admin/settings
   - Google Calendar sync: /admin/settings  
   - Form prenotazione: homepage
   - Admin panel: /admin

üìû SUPPORTO:
Se hai problemi, controlla:
- Firebase Functions logs
- Browser console (F12)
- DEPLOYMENT_GUIDE.md

üöÄ Il sito per ${config.client.name} √® pronto!

URL Produzione: https://${config.firebase.projectId}.web.app
Admin Panel: https://${config.firebase.projectId}.web.app/admin

===================================`);
}

// Error handling
process.on('SIGINT', () => {
  console.log('\n\n‚ùå Setup interrotto dall\'utente');
  rl.close();
  process.exit(0);
});

// Run setup
if (require.main === module) {
  runSetup();
}

module.exports = { runSetup };
